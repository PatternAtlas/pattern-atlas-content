<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-latest.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
    <changeSet author="Daniel Georg" id="1690883645063-2">
        <insert tableName="pattern">
            <column name="id" value="b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a"/>
            <column name="name" value="Unified Observability"/>
            <column name="uri" value="https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/unifiedObservability"/>
            <column name="content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;When executing hybrid quantum applications in heterogeneous execution environments, collecting all necessary data is difficult: The data must be gathered using the different APIs or SDKs of the utilized quantum and classical cloud offerings, which often change, e.g., when new features are released. Furthermore, the offerings might not provide all the required data  [Weder et al., 2021a](https://doi.org/10.1049/qtc2.12012). Finally, some of the data also changes over time, e.g., the qubit decoherence times or the error rates [[Tannu and Qureshi, 2019]](https://doi.org/10.1145/3297858.330400). Analyzing the data is complicated by different data formats and abstraction levels of the provided data [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36). Moreover, hybrid quantum applications are typically developed and operated by interdisciplinary teams with various backgrounds, e.g., physics, mathematics, and software engineering, requiring different information [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4).&quot;, &quot;Intent&quot;: &quot;How to ensure reproducibility, understandability, and quality when executing hybrid quantum applications?&quot;, &quot;Result&quot;: &quot;The provenance system stores all relevant data produced by the quantum applications, enabling their monitoring and analysis, e.g., to identify errors and optimize the application. Data abstractions facilitate understanding the application and its execution environment, particularly by visualizing crucial data.&quot;, &quot;Context&quot;: &quot;Quantum applications comprise a multitude of classical programs and quantum circuits which are typically executed in a heterogeneous execution environment, e.g., utilizing classical and quantum cloud offerings [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36), [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Figure 6 shows the phases required to achieve unified observability. Data about the execution of the quantum application and the used quantum and classical resources must be collected continuously. Persistently store these data using a provenance system that automatically unifies data using transformation methods. For example, quantum cloud offerings use both the fidelity and error rate metrics to describe the quality of their gate operations, where Error Rate = 1−Fidelity. Use benchmarks to retrieve data that is not provided by the cloud offerings but required by the user [[Tomesh et al., 2022]](\nhttps://doi.org/10.48550/arXiv.2202.11045). To enable user-group-specific monitoring and analysis provide suitable abstractions, e.g., by aggregating data or hiding unnecessary information [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36).\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/unified_observability_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36) introduce a concept to unify the observability of hybrid quantum applications realized using workflows within heterogeneous multi-cloud environments. [Weder et al., 2021a](https://doi.org/10.1049/qtc2.12012) present a provenance system for quantum computing automatically gathering required provenance data, which can be used for monitoring and analysis.&quot;, &quot;Related Pattern&quot;: &quot;The [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern can be combined with the [Unified Observability](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a) pattern to monitor and analyze the execution of quantum applications using heterogeneous hardware. The stored data about quantum devices can be used as a basis for the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317), [Gate Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b6788c99-24f5-496b-a30c-fc0dd7bb3e96), and [Readout Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/ed3af509-904e-4732-8113-215d65a7d53d) patterns [[Beisel et al., 2022]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2022_2_10_70007).&quot;}"/>
            <column name="icon_url" value="https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/icons/quantum_computing_patterns/observability_icon-thin.svg"/>
            <column name="rendered_content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;When executing hybrid quantum applications in heterogeneous execution environments, collecting all necessary data is difficult: The data must be gathered using the different APIs or SDKs of the utilized quantum and classical cloud offerings, which often change, e.g., when new features are released. Furthermore, the offerings might not provide all the required data  [Weder et al., 2021a](https://doi.org/10.1049/qtc2.12012). Finally, some of the data also changes over time, e.g., the qubit decoherence times or the error rates [[Tannu and Qureshi, 2019]](https://doi.org/10.1145/3297858.330400). Analyzing the data is complicated by different data formats and abstraction levels of the provided data [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36). Moreover, hybrid quantum applications are typically developed and operated by interdisciplinary teams with various backgrounds, e.g., physics, mathematics, and software engineering, requiring different information [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4).&quot;, &quot;Intent&quot;: &quot;How to ensure reproducibility, understandability, and quality when executing hybrid quantum applications?&quot;, &quot;Result&quot;: &quot;The provenance system stores all relevant data produced by the quantum applications, enabling their monitoring and analysis, e.g., to identify errors and optimize the application. Data abstractions facilitate understanding the application and its execution environment, particularly by visualizing crucial data.&quot;, &quot;Context&quot;: &quot;Quantum applications comprise a multitude of classical programs and quantum circuits which are typically executed in a heterogeneous execution environment, e.g., utilizing classical and quantum cloud offerings [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36), [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Figure 6 shows the phases required to achieve unified observability. Data about the execution of the quantum application and the used quantum and classical resources must be collected continuously. Persistently store these data using a provenance system that automatically unifies data using transformation methods. For example, quantum cloud offerings use both the fidelity and error rate metrics to describe the quality of their gate operations, where Error Rate = 1−Fidelity. Use benchmarks to retrieve data that is not provided by the cloud offerings but required by the user [[Tomesh et al., 2022]](\nhttps://doi.org/10.48550/arXiv.2202.11045). To enable user-group-specific monitoring and analysis provide suitable abstractions, e.g., by aggregating data or hiding unnecessary information [[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36).\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/unified_observability_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[[Beisel et al., 2024]](https://doi.org/10.1007/978-3-031-61057-8_36) introduce a concept to unify the observability of hybrid quantum applications realized using workflows within heterogeneous multi-cloud environments. [Weder et al., 2021a](https://doi.org/10.1049/qtc2.12012) present a provenance system for quantum computing automatically gathering required provenance data, which can be used for monitoring and analysis.&quot;, &quot;Related Pattern&quot;: &quot;The [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern can be combined with the [Unified Observability](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a) pattern to monitor and analyze the execution of quantum applications using heterogeneous hardware. The stored data about quantum devices can be used as a basis for the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317), [Gate Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b6788c99-24f5-496b-a30c-fc0dd7bb3e96), and [Readout Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/ed3af509-904e-4732-8113-215d65a7d53d) patterns [[Beisel et al., 2022]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2022_2_10_70007).&quot;}"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="paper_ref" value="This pattern is originally published in M. Beisel, J. Barzen, F. Leymann, and B. Weder, Operations Patterns for Hybrid Quantum Applications, in Proceedings of the 15th International Conference on Cloud Computing and Services Science (CLOSER). SciTePress, 2025."/>
            <column name="deployment_modeling_behavior_pattern"/>
            <column name="deployment_modeling_structure_pattern"/>
            <column name="tags"/>
        </insert>
    <insert tableName="pattern">
            <column name="id" value="59389814-01e0-4422-8012-a298940064aa"/>
            <column name="name" value="Unified Execution"/>
            <column name="uri" value="https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/unifiedExecution"/>
            <column name="content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;When an SDK is used to implement quantum circuits, they can only be executed utilizing a quantum cloud offering supported by the respective SDK. If, on the other hand, a quantum programming language or a quantum assembler is used, the quantum cloud offering for the execution must support this technology. This often leads to a vendor lock-in, which prevents users from flexibly switching to a different quantum cloud offering that provides, e.g., cheaper access.&quot;, &quot;Intent&quot;: &quot;How to execute a quantum circuit independently of the heterogeneous quantum cloud offerings and their supported quantum circuit formats?&quot;, &quot;Result&quot;: &quot;The quantum circuit can be executed via a single interface independently of the circuit format and quantum cloud offering. Thus, vendor lock-ins can be avoided and circuits can be executed using different quantum cloud offerings without any additional effort. However, the unification middleware does not automatically select a suitable quantum device but only supports the execution on the target device.&quot;, &quot;Context&quot;: &quot;Quantum circuits should be executed using a suitable quantum cloud offering. The circuits might be implemented utilizing different SDKs, such as Qiskit and Braket, quantum programming languages, such as Q#, or quantum assembler, such as OpenQASM [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256), [[Vietz et al., 2021]](https://doi.org/10.1007/978-3-030-77980-1_10).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Unify the execution of quantum circuits by utilizing a middleware providing a single, unified interface for accessing different quantum cloud offerings. Figure 3 gives an overview of the conceptual structure of the unification middleware. This middleware uses a set of translators that automatically translate the given quantum circuit for the target quantum device if the format of the circuit is not natively supported. Since accessing quantum devices requires users to authenticate themselves, an access token is required for each quantum cloud offering. They can either (i) be provided with each execution request or (ii) the middleware can store the tokens of each user. Alternatively, (iii) the middleware provides access to all quantum devices via a separate pricing model, facilitating the execution for users as they do not require an access token for each quantum cloud offering.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/unified_execution_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[Giortamis et al., 2024](https://doi.org/10.48550/arXiv.2408.04312) introduce Qonductor, a tool for executing quantum applications via a hardware-agnostic API. [Salm et al., 2020](https://doi.org/10.1007/978-3-030-64846-6_5) present a concept as well as a corresponding tool for automatically translating circuits between different circuit formats and executing them via different quantum cloud offerings. [Weder et al., 2024](https://doi.org/10.48550/arXiv.2411.06889) introduce a unification middleware for quantum cloud offerings, which also enables additional features, such as circuit cutting.&quot;, &quot;Related Pattern&quot;: &quot;The [Quantum Circuit Translator](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/aa90de15-b7e3-45a7-bb48-f0a5b8b2c479) pattern [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009) is utilized by the unification middleware to translate quantum circuits that use data formats incompatible with the target quantum device. To select a suitable quantum device for the quantum circuit at hand, the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317) pattern can be used in combination with the [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern. The [Unified Observability](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a) pattern enables monitoring and analyzing the execution of quantum circuits when using heterogeneous quantum cloud offerings.&quot;}"/>
            <column name="icon_url" value="https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/icons/quantum_computing_patterns/unified_execution_icon-thin.svg"/>
            <column name="rendered_content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;When an SDK is used to implement quantum circuits, they can only be executed utilizing a quantum cloud offering supported by the respective SDK. If, on the other hand, a quantum programming language or a quantum assembler is used, the quantum cloud offering for the execution must support this technology. This often leads to a vendor lock-in, which prevents users from flexibly switching to a different quantum cloud offering that provides, e.g., cheaper access.&quot;, &quot;Intent&quot;: &quot;How to execute a quantum circuit independently of the heterogeneous quantum cloud offerings and their supported quantum circuit formats?&quot;, &quot;Result&quot;: &quot;The quantum circuit can be executed via a single interface independently of the circuit format and quantum cloud offering. Thus, vendor lock-ins can be avoided and circuits can be executed using different quantum cloud offerings without any additional effort. However, the unification middleware does not automatically select a suitable quantum device but only supports the execution on the target device.&quot;, &quot;Context&quot;: &quot;Quantum circuits should be executed using a suitable quantum cloud offering. The circuits might be implemented utilizing different SDKs, such as Qiskit and Braket, quantum programming languages, such as Q#, or quantum assembler, such as OpenQASM [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256), [[Vietz et al., 2021]](https://doi.org/10.1007/978-3-030-77980-1_10).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Unify the execution of quantum circuits by utilizing a middleware providing a single, unified interface for accessing different quantum cloud offerings. Figure 3 gives an overview of the conceptual structure of the unification middleware. This middleware uses a set of translators that automatically translate the given quantum circuit for the target quantum device if the format of the circuit is not natively supported. Since accessing quantum devices requires users to authenticate themselves, an access token is required for each quantum cloud offering. They can either (i) be provided with each execution request or (ii) the middleware can store the tokens of each user. Alternatively, (iii) the middleware provides access to all quantum devices via a separate pricing model, facilitating the execution for users as they do not require an access token for each quantum cloud offering.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/unified_execution_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[Giortamis et al., 2024](https://doi.org/10.48550/arXiv.2408.04312) introduce Qonductor, a tool for executing quantum applications via a hardware-agnostic API. [Salm et al., 2020](https://doi.org/10.1007/978-3-030-64846-6_5) present a concept as well as a corresponding tool for automatically translating circuits between different circuit formats and executing them via different quantum cloud offerings. [Weder et al., 2024](https://doi.org/10.48550/arXiv.2411.06889) introduce a unification middleware for quantum cloud offerings, which also enables additional features, such as circuit cutting.&quot;, &quot;Related Pattern&quot;: &quot;The [Quantum Circuit Translator](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/aa90de15-b7e3-45a7-bb48-f0a5b8b2c479) pattern [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009) is utilized by the unification middleware to translate quantum circuits that use data formats incompatible with the target quantum device. To select a suitable quantum device for the quantum circuit at hand, the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317) pattern can be used in combination with the [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern. The [Unified Observability](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a) pattern enables monitoring and analyzing the execution of quantum circuits when using heterogeneous quantum cloud offerings.&quot;}"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="paper_ref" value="This pattern is originally published in M. Beisel, J. Barzen, F. Leymann, and B. Weder, Operations Patterns for Hybrid Quantum Applications, in Proceedings of the 15th International Conference on Cloud Computing and Services Science (CLOSER). SciTePress, 2025."/>
            <column name="deployment_modeling_behavior_pattern"/>
            <column name="deployment_modeling_structure_pattern"/>
            <column name="tags"/>
        </insert>
        <insert tableName="pattern">
            <column name="id" value="60736854-6eb4-47b5-9619-2370825a34e9"/>
            <column name="name" value="Quantum Application Archive"/>
            <column name="uri" value="https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/quantumApplicationArchive"/>
            <column name="content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Enter your input for this section here. Software in the quantum computing domain is frequently updated [[Vietz et al., 2021]](https://doi.org/10.1007/978-3-030-77980-1_10), [[Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093)]. This often leads to incompatibility when upgrading different parts of the application. Further, identifying all required artifacts and transferring them into a target environment is time-consuming, complex, and error-prone. Distributing and selling hybrid quantum applications, e.g., via a marketplace, typically requires them to be available as a single entity.\n \n&quot;, &quot;Intent&quot;: &quot;How to store, version, and distribute the various heterogeneous artifacts of a hybrid quantum application?&quot;, &quot;Result&quot;: &quot;By packaging quantum applications utilizing a quantum application archive, all classical and quantum artifacts required for execution can be shared as a single entity. Since the archive does not only contain the executable programs but also comprises all the necessary data for setting up the execution environment, it can be executed independently of the execution environment installed by the user. Due to the holistic versioning of the artifacts of the quantum application archive, incompatibilities are prevented.&quot;, &quot;Context&quot;: &quot;Hybrid quantum applications comprise a wide variety of artifacts, e.g., classical programs, quantum circuits, deployment models, and specifications of the control and data flow [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4). The execution of hybrid quantum applications in a target environment requires the availability of these artifacts. For a stable execution in production environments, the application must be versioned and all dependencies must be fixed [[Altmanninger et al., 2009]](https://doi.org/10.1108/17440080910983556).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;To enable the storage, versioning, and distribution of hybrid quantum applications, package all required artifacts in a self-contained quantum application archive as shown in Figure 2. Thereby, ensure that all artifacts have a fixed version to prevent incompatibilities through future updates. The quantum application archive must comprise all artifacts required to set up the execution environment of the application and to subsequently execute it in this environment.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/packaging-sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093) introduce a concept for the self-contained packaging of hybrid quantum applications. Different development lifecycles for hybrid quantum applications have been presented that include the packaging of the application as an essential phase [[Gheorghe-Pop et al.,2020]](https://doi.org/10.1109/GCWkshps50303.2020.9367411), [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4). [Leymann et al., 2019](http://www2.informatik.uni-stuttgart.de/cgibin/NCSTRL/NCSTRL_view.pl?id=INPROC-2019-24&amp;engl=) describe a platform for distributing quantum applications, which enables users to package and sell their quantum applications.&quot;, &quot;Related Pattern&quot;: &quot;Hybrid quantum algorithms within a quantum application archive are commonly realized by the [Hybrid Module](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/4074490a-4236-49ed-83d1-625ce58e2dbd) pattern [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009). To deploy and execute the packaged quantum application, the [Pre-deployed Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/9af072e8-875b-4e7d-980a-98cc6e0e7fd6)  pattern [[Georg et al., 2023]](https://www.scitepress.org/Link.aspx?doi=10.5220%2F0012057700003538) can be utilized. The [Quantum Application Testing](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/456d4450-9ba7-4e43-8cb7-03ae01936fc4) pattern should be applied when packaging a hybrid quantum application to verify the correct behavior of all contained artifacts.&quot;}"/>
            <column name="icon_url" value="https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/icons/quantum_computing_patterns/packaging_icon-thin.svg"/>
            <column name="rendered_content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Enter your input for this section here. Software in the quantum computing domain is frequently updated [[Vietz et al., 2021]](https://doi.org/10.1007/978-3-030-77980-1_10), [[Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093)]. This often leads to incompatibility when upgrading different parts of the application. Further, identifying all required artifacts and transferring them into a target environment is time-consuming, complex, and error-prone. Distributing and selling hybrid quantum applications, e.g., via a marketplace, typically requires them to be available as a single entity.\n \n&quot;, &quot;Intent&quot;: &quot;How to store, version, and distribute the various heterogeneous artifacts of a hybrid quantum application?&quot;, &quot;Result&quot;: &quot;By packaging quantum applications utilizing a quantum application archive, all classical and quantum artifacts required for execution can be shared as a single entity. Since the archive does not only contain the executable programs but also comprises all the necessary data for setting up the execution environment, it can be executed independently of the execution environment installed by the user. Due to the holistic versioning of the artifacts of the quantum application archive, incompatibilities are prevented.&quot;, &quot;Context&quot;: &quot;Hybrid quantum applications comprise a wide variety of artifacts, e.g., classical programs, quantum circuits, deployment models, and specifications of the control and data flow [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4). The execution of hybrid quantum applications in a target environment requires the availability of these artifacts. For a stable execution in production environments, the application must be versioned and all dependencies must be fixed [[Altmanninger et al., 2009]](https://doi.org/10.1108/17440080910983556).&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;To enable the storage, versioning, and distribution of hybrid quantum applications, package all required artifacts in a self-contained quantum application archive as shown in Figure 2. Thereby, ensure that all artifacts have a fixed version to prevent incompatibilities through future updates. The quantum application archive must comprise all artifacts required to set up the execution environment of the application and to subsequently execute it in this environment.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/packaging-sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;[Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093) introduce a concept for the self-contained packaging of hybrid quantum applications. Different development lifecycles for hybrid quantum applications have been presented that include the packaging of the application as an essential phase [[Gheorghe-Pop et al.,2020]](https://doi.org/10.1109/GCWkshps50303.2020.9367411), [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4). [Leymann et al., 2019](http://www2.informatik.uni-stuttgart.de/cgibin/NCSTRL/NCSTRL_view.pl?id=INPROC-2019-24&amp;engl=) describe a platform for distributing quantum applications, which enables users to package and sell their quantum applications.&quot;, &quot;Related Pattern&quot;: &quot;Hybrid quantum algorithms within a quantum application archive are commonly realized by the [Hybrid Module](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/4074490a-4236-49ed-83d1-625ce58e2dbd) pattern [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009). To deploy and execute the packaged quantum application, the [Pre-deployed Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/9af072e8-875b-4e7d-980a-98cc6e0e7fd6)  pattern [[Georg et al., 2023]](https://www.scitepress.org/Link.aspx?doi=10.5220%2F0012057700003538) can be utilized. The [Quantum Application Testing](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/456d4450-9ba7-4e43-8cb7-03ae01936fc4) pattern should be applied when packaging a hybrid quantum application to verify the correct behavior of all contained artifacts.&quot;}"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="paper_ref" value="This pattern is originally published in M. Beisel, J. Barzen, F. Leymann, and B. Weder, Operations Patterns for Hybrid Quantum Applications, in Proceedings of the 15th International Conference on Cloud Computing and Services Science (CLOSER). SciTePress, 2025."/>
            <column name="deployment_modeling_behavior_pattern"/>
            <column name="deployment_modeling_structure_pattern"/>
            <column name="tags"/>
        </insert>
        <insert tableName="pattern">
            <column name="id" value="456d4450-9ba7-4e43-8cb7-03ae01936fc4"/>
            <column name="name" value="Quantum Application Testing"/>
            <column name="uri" value="https://patternpedia.org/patternLanguages/quantumAlgorithmPatterns/quantumApplicationTesting"/>
            <column name="content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Quantum applications comprise heterogeneous programs, e.g., using different programming languages and data formats. The execution of quantum circuits is probabilistic and arbitrary unknown quantum states can not be copied, hence, obtaining information about a qubit without disturbing the corresponding quantum system state is impossible [[Ali et al., 2021]](https://ieeexplore.ieee.org/document/9438603), [[Buzek and Hillery, 1996]](https://doi.org/10.1103/PhysRevA.54.1844). Further, simulating the execution of larger quantum circuits is impossible due to the exponential resources required\nfor simulating additional qubits [[Zhou et al., 2020]](https://doi.org/10.1103/PhysRevX.10.041038). The changing characteristics of quantum devices may lead to different results when executing the same quantum circuit at different times, even when using the same quantum devices [[Tannu and Qureshi, 2019)]](https://doi.org/10.1145/3297858.3304007).&quot;, &quot;Intent&quot;: &quot;How to ensure the correctness of all functionalities of a hybrid quantum application?&quot;, &quot;Result&quot;: &quot;By testing all artifacts of a quantum application, as well as their interplay and execution environment, the reliability of the quantum application is significantly increased. Well-tested artifacts of hybrid applications promote their reuse for other applications ([[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4), [[Zhao, 2020]](\nhttps://doi.org/10.48550/arXiv.2007.07047). To automate the testing procedure it may be integrated, e.g., into the application’s continuous integration and development (CI/CD) pipeline [[Romero- Alvarez et al., 2024]](https://doi.org/10.1002/spe.3326).&quot;, &quot;Context&quot;: &quot;Hybrid quantum applications are realized using a plethora of different artifacts, such as quantum circuits, classical programs, deployment models, and control and data flow specifications [Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093). The correctness of the functionality of all artifacts as well as their interactions must be ensured.&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Utilize a holistic testing strategy comprising the following steps as depicted in Figure 5: (i) Unit tests for the classical programs. (ii) Specific tests for the quantum circuits. This includes mathematical verification of quantum circuits [[Chareton et al., 2021]](https://doi.org/10.1007/978-3-030-72019-3_6), [[Wang et al., 2008]](https://doi.org/10.1093/ietfec/e91-a.2.584), adding and evaluating assertations to ensure certain states [[Huang and Martonosi, 2019]](https://doi.org/10.1145/3307650.3322213), [[Liu et al., 2020]](https://doi.org/10.1145/3373376.3378488), as well as white and black box tests for quantum circuits [[Miranskyy et al., 2020]](https://doi.org/10.1145/3377816.3381731). (iii) Deployment tests verifying that the application was provisioned as intended (Wurster et al., 2018). (iv) Integration tests validating the interplay of the various software artifacts [[Wu et al., 2003]](https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=21ef3caf2a626d1bbde001cec9267459b06e45af).\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/testing_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;Different lifecycles for hybrid quantum applications include a dedicated testing phase focussing on the quantum-specific as well as integration aspects [Gheorghe-Pop et al.](https://doi.org/10.1109/GCWkshps50303.2020.9367411); [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4), [[Zhao, 2020]](\nhttps://doi.org/10.48550/arXiv.2007.07047). [Becker et al., 2023](https://ieeexplore.ieee.org/document/10234240) introduce a testing pipeline for hybrid quantum applications that includes tests for classical programs as well as quantum circuits. [Romero- Alvarez et al., 2024](https://doi.org/10.1002/spe.3326) present a concept to integrate hybrid quantum applications into CI/CD pipelines. They enable the automated testing and deployment of hybrid quantum applications including the classical programs and quantum circuits.&quot;, &quot;Related Pattern&quot;: &quot;The correct functionality of hybrid quantum applications also depends on hardware characteristics and the current calibration of quantum devices. To select a suitable quantum device for testing the quantum application, the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317) pattern can be utilized. The [Quantum Application Archive](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/60736854-6eb4-47b5-9619-2370825a34e9) pattern can include test specifications enabling integration and deployment tests in the target environment. Due to the increased complexity when integrating quantum and classical programs, each [Classical-Quantum Interface](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/8fcca2dc-fca0-47cf-9bd4-038cd2fe8fb8) [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009) should be tested.&quot;}"/>
            <column name="icon_url" value="https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/icons/quantum_computing_patterns/testing_icon-thin.svg"/>
            <column name="rendered_content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Quantum applications comprise heterogeneous programs, e.g., using different programming languages and data formats. The execution of quantum circuits is probabilistic and arbitrary unknown quantum states can not be copied, hence, obtaining information about a qubit without disturbing the corresponding quantum system state is impossible [[Ali et al., 2021]](https://ieeexplore.ieee.org/document/9438603), [[Buzek and Hillery, 1996]](https://doi.org/10.1103/PhysRevA.54.1844). Further, simulating the execution of larger quantum circuits is impossible due to the exponential resources required\nfor simulating additional qubits [[Zhou et al., 2020]](https://doi.org/10.1103/PhysRevX.10.041038). The changing characteristics of quantum devices may lead to different results when executing the same quantum circuit at different times, even when using the same quantum devices [[Tannu and Qureshi, 2019)]](https://doi.org/10.1145/3297858.3304007).&quot;, &quot;Intent&quot;: &quot;How to ensure the correctness of all functionalities of a hybrid quantum application?&quot;, &quot;Result&quot;: &quot;By testing all artifacts of a quantum application, as well as their interplay and execution environment, the reliability of the quantum application is significantly increased. Well-tested artifacts of hybrid applications promote their reuse for other applications ([[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4), [[Zhao, 2020]](\nhttps://doi.org/10.48550/arXiv.2007.07047). To automate the testing procedure it may be integrated, e.g., into the application’s continuous integration and development (CI/CD) pipeline [[Romero- Alvarez et al., 2024]](https://doi.org/10.1002/spe.3326).&quot;, &quot;Context&quot;: &quot;Hybrid quantum applications are realized using a plethora of different artifacts, such as quantum circuits, classical programs, deployment models, and control and data flow specifications [Weder et al.,2021b](https://api.semanticscholar.org/CorpusID:232148093). The correctness of the functionality of all artifacts as well as their interactions must be ensured.&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Utilize a holistic testing strategy comprising the following steps as depicted in Figure 5: (i) Unit tests for the classical programs. (ii) Specific tests for the quantum circuits. This includes mathematical verification of quantum circuits [[Chareton et al., 2021]](https://doi.org/10.1007/978-3-030-72019-3_6), [[Wang et al., 2008]](https://doi.org/10.1093/ietfec/e91-a.2.584), adding and evaluating assertations to ensure certain states [[Huang and Martonosi, 2019]](https://doi.org/10.1145/3307650.3322213), [[Liu et al., 2020]](https://doi.org/10.1145/3373376.3378488), as well as white and black box tests for quantum circuits [[Miranskyy et al., 2020]](https://doi.org/10.1145/3377816.3381731). (iii) Deployment tests verifying that the application was provisioned as intended (Wurster et al., 2018). (iv) Integration tests validating the interplay of the various software artifacts [[Wu et al., 2003]](https://citeseerx.ist.psu.edu/document?repid=rep1&amp;type=pdf&amp;doi=21ef3caf2a626d1bbde001cec9267459b06e45af).\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/testing_sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;Different lifecycles for hybrid quantum applications include a dedicated testing phase focussing on the quantum-specific as well as integration aspects [Gheorghe-Pop et al.](https://doi.org/10.1109/GCWkshps50303.2020.9367411); [[Weder et al., 2022]](https://doi.org/10.1007/978-3-031-05324-5_4), [[Zhao, 2020]](\nhttps://doi.org/10.48550/arXiv.2007.07047). [Becker et al., 2023](https://ieeexplore.ieee.org/document/10234240) introduce a testing pipeline for hybrid quantum applications that includes tests for classical programs as well as quantum circuits. [Romero- Alvarez et al., 2024](https://doi.org/10.1002/spe.3326) present a concept to integrate hybrid quantum applications into CI/CD pipelines. They enable the automated testing and deployment of hybrid quantum applications including the classical programs and quantum circuits.&quot;, &quot;Related Pattern&quot;: &quot;The correct functionality of hybrid quantum applications also depends on hardware characteristics and the current calibration of quantum devices. To select a suitable quantum device for testing the quantum application, the [Quantum Hardware Selection](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/0ad210d4-18ad-4803-ba6b-536af0fab317) pattern can be utilized. The [Quantum Application Archive](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/60736854-6eb4-47b5-9619-2370825a34e9) pattern can include test specifications enabling integration and deployment tests in the target environment. Due to the increased complexity when integrating quantum and classical programs, each [Classical-Quantum Interface](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/8fcca2dc-fca0-47cf-9bd4-038cd2fe8fb8) [[Bühler et al., 2023]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2023_2_30_70009) should be tested.&quot;}"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="paper_ref" value="This pattern is originally published in M. Beisel, J. Barzen, F. Leymann, and B. Weder, Operations Patterns for Hybrid Quantum Applications, in Proceedings of the 15th International Conference on Cloud Computing and Services Science (CLOSER). SciTePress, 2025."/>
            <column name="deployment_modeling_behavior_pattern"/>
            <column name="deployment_modeling_structure_pattern"/>
            <column name="tags"/>
        </insert>
        <insert tableName="pattern">
            <column name="id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
            <column name="name" value="Quantum Hardware Selection"/>
            <column name="uri" value="https://patternpedia.org/patternLanguages/reformulatedQuantumComputingPatterns/quantum-hardware-selection"/>
            <column name="content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Quantum devices are provided by different vendors, e.g., IBM, IonQ, and Rigetti [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256). These quantum devices are very heterogeneous and differ in characteristics, such as the number of qubits, their decoherence times, or the supported gate set  [[Weder et al., 2021a]](https://doi.org/10.1049/qtc2.12012). Some of the characteristics change over time, e.g., the decoherence times when recalibrating the quantum device  [[Tannu and Qureshi, 2019)]](https://doi.org/10.1145/3297858.3304007). However, the successful execution of a given quantum circuit depends on these characteristics [[Salm et al., 2020]](https://doi.org/10.1007/978-3-030-64846-6_5). Thus, selecting an unsuitable quantum device can lead to error-prone results. Quantum cloud offerings also differ regarding their payment models and access methods, e.g., queue based systems or reservations of exclusive time slots.&quot;, &quot;Intent&quot;: &quot;How to automatically select a suitable quantum device to execute a given quantum circuit?&quot;, &quot;Result&quot;: &quot;The quantum circuit can be executed on the selected quantum device. Proper hardware selection might reduce the impact of errors and can optimize other factors, such as the waiting time, depending on the user goal. If the format of the circuit is incompatible with the selected device, it must be translated. &quot;, &quot;Context&quot;: &quot;Quantum circuits can either be executed on a quantum device or a classical computer simulating the computation. However, it is impossible to simulate larger quantum circuits using classical hardware [[Zhou et al., 2020]](https://doi.org/10.1103/PhysRevX.10.041038). Therefore, a suitable quantum device for the execution must be selected.&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Figure 4 gives an overview of the phases to select suitable quantum devices. In the first step, the characteristics of the quantum  devices available to the user are retrieved. This can either be done by periodically accessing an API providing live data about these characteristics, e.g., a provider API or a dedicated provenance system, or by executing benchmarks that approximate device characteristics [[Amazon, 2024]](https://aws.amazon.com/braket/), [[IBM, 2024a]](https://quantum.ibm.com), [[Weder et al., 2021a]](https://doi.org/10.1049/qtc2.12012). Then, analyze the given quantum circuit so that in the next phase the suitability of the devices can be ranked based on the characteristics of the circuits and devices [[Salm et al., 2020]](https://doi.org/10.1007/978-3-030-64846-6_5). Finally, ensure that a quantum device is selected that is available via a suitable cloud offering, e.g., a cloud offering supporting a pay-per-use model.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/hw-selection-sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;Salm et al. [Salm et al., 2020](https://doi.org/10.1007/978-3-030-64846-6_5) and [[Quetschlich et al., 2023]](https://doi.org/10.1145/3673241) introduce tools to automatically select suitable quantum devices based on given quantum circuits. [[Suchara et al., 2013]](https://ieeexplore.ieee.org/document/6657074) present the QuRE Toolbox, a framework to estimate the required resources for executing quantum circuits. This information can then be used to select a suitable quantum device. Qiskit provides functionalities to filter available quantum devices based on different characteristics, e.g., the minimum number of qubits or the supported gate set [[IBM, 2024b]](https://docs.quantum.ibm.com/guides/get-qpu-information#filter-backends). Further, the quantum device for the execution can be selected from the remaining quantum devices based on their current queue size.&quot;, &quot;Related Pattern&quot;: &quot;The [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern can be used to execute the quantum circuit if the circuit format is not supported by the selected quantum device. The [Prioritized Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/70adfd6f-0648-47cf-88ff-0212b882a262)  pattern [[Georg et al., 2023]](https://www.scitepress.org/Link.aspx?doi=10.5220%2F0012057700003538) enables selecting a suitable quantum device even if the respective queue is long by providing prioritized access to the quantum device. Since errors still occur when utilizing a suitable quantum device, their impact can be reduced by applying the [Readout Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/ed3af509-904e-4732-8113-215d65a7d53d) and [Gate Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b6788c99-24f5-496b-a30c-fc0dd7bb3e96) patterns [[Beisel et al., 2022]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2022_2_10_70007).&quot;}"/>
            <column name="icon_url" value="https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/icons/quantum_computing_patterns/quantum_hardware_selection_icon.svg"/>
            <column name="rendered_content" value="{&quot;Alias&quot;: &quot;–&quot;, &quot;Forces&quot;: &quot;Quantum devices are provided by different vendors, e.g., IBM, IonQ, and Rigetti [[Leymann et al., 2020]](https://doi.org/10.48550/arXiv.2003.06256). These quantum devices are very heterogeneous and differ in characteristics, such as the number of qubits, their decoherence times, or the supported gate set  [[Weder et al., 2021a]](https://doi.org/10.1049/qtc2.12012). Some of the characteristics change over time, e.g., the decoherence times when recalibrating the quantum device  [[Tannu and Qureshi, 2019)]](https://doi.org/10.1145/3297858.3304007). However, the successful execution of a given quantum circuit depends on these characteristics [[Salm et al., 2020]](https://doi.org/10.1007/978-3-030-64846-6_5). Thus, selecting an unsuitable quantum device can lead to error-prone results. Quantum cloud offerings also differ regarding their payment models and access methods, e.g., queue based systems or reservations of exclusive time slots.&quot;, &quot;Intent&quot;: &quot;How to automatically select a suitable quantum device to execute a given quantum circuit?&quot;, &quot;Result&quot;: &quot;The quantum circuit can be executed on the selected quantum device. Proper hardware selection might reduce the impact of errors and can optimize other factors, such as the waiting time, depending on the user goal. If the format of the circuit is incompatible with the selected device, it must be translated. &quot;, &quot;Context&quot;: &quot;Quantum circuits can either be executed on a quantum device or a classical computer simulating the computation. However, it is impossible to simulate larger quantum circuits using classical hardware [[Zhou et al., 2020]](https://doi.org/10.1103/PhysRevX.10.041038). Therefore, a suitable quantum device for the execution must be selected.&quot;, &quot;Examples&quot;: &quot;–&quot;, &quot;Solution&quot;: &quot;Figure 4 gives an overview of the phases to select suitable quantum devices. In the first step, the characteristics of the quantum  devices available to the user are retrieved. This can either be done by periodically accessing an API providing live data about these characteristics, e.g., a provider API or a dedicated provenance system, or by executing benchmarks that approximate device characteristics [[Amazon, 2024]](https://aws.amazon.com/braket/), [[IBM, 2024a]](https://quantum.ibm.com), [[Weder et al., 2021a]](https://doi.org/10.1049/qtc2.12012). Then, analyze the given quantum circuit so that in the next phase the suitability of the devices can be ranked based on the characteristics of the circuits and devices [[Salm et al., 2020]](https://doi.org/10.1007/978-3-030-64846-6_5). Finally, ensure that a quantum device is selected that is available via a suitable cloud offering, e.g., a cloud offering supporting a pay-per-use model.\n\n![Solution Sketch](https://raw.githubusercontent.com/PatternAtlas/pattern-atlas-content/refs/heads/main/sketches/quantum_computing_patterns/hw-selection-sketch.svg)&quot;, &quot;Known Uses&quot;: &quot;Salm et al. [Salm et al., 2020](https://doi.org/10.1007/978-3-030-64846-6_5) and [[Quetschlich et al., 2023]](https://doi.org/10.1145/3673241) introduce tools to automatically select suitable quantum devices based on given quantum circuits. [[Suchara et al., 2013]](https://ieeexplore.ieee.org/document/6657074) present the QuRE Toolbox, a framework to estimate the required resources for executing quantum circuits. This information can then be used to select a suitable quantum device. Qiskit provides functionalities to filter available quantum devices based on different characteristics, e.g., the minimum number of qubits or the supported gate set [[IBM, 2024b]](https://docs.quantum.ibm.com/guides/get-qpu-information#filter-backends). Further, the quantum device for the execution can be selected from the remaining quantum devices based on their current queue size.&quot;, &quot;Related Pattern&quot;: &quot;The [Unified Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/59389814-01e0-4422-8012-a298940064aa) pattern can be used to execute the quantum circuit if the circuit format is not supported by the selected quantum device. The [Prioritized Execution](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/70adfd6f-0648-47cf-88ff-0212b882a262)  pattern [[Georg et al., 2023]](https://www.scitepress.org/Link.aspx?doi=10.5220%2F0012057700003538) enables selecting a suitable quantum device even if the respective queue is long by providing prioritized access to the quantum device. Since errors still occur when utilizing a suitable quantum device, their impact can be reduced by applying the [Readout Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/ed3af509-904e-4732-8113-215d65a7d53d) and [Gate Error Mitigation](pattern-languages/af7780d5-1f97-4536-8da7-4194b093ab1d/b6788c99-24f5-496b-a30c-fc0dd7bb3e96) patterns [[Beisel et al., 2022]](https://www.thinkmind.org/index.php?view=article&amp;articleid=patterns_2022_2_10_70007).&quot;}"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="paper_ref" value="This pattern is originally published in M. Beisel, J. Barzen, F. Leymann, and B. Weder, Operations Patterns for Hybrid Quantum Applications, in Proceedings of the 15th International Conference on Cloud Computing and Services Science (CLOSER). SciTePress, 2025."/>
            <column name="deployment_modeling_behavior_pattern"/>
            <column name="deployment_modeling_structure_pattern"/>
            <column name="tags" value="behavioral"/>
        </insert>

        <insert tableName="directed_edge">
            <column name="id" value="f22997d5-8a4b-4a89-b1db-7d6db5e13649"/>
            <column name="description" value="null"/>
            <column name="type" value="isRelatedTo"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a"/>
            <column name="target_id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="aa4bde67-766f-4f29-8b89-377142dceb7c"/>
            <column name="description" value="null"/>
            <column name="type" value="isRelatedTo"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a"/>
            <column name="target_id" value="b6788c99-24f5-496b-a30c-fc0dd7bb3e96"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="255f509a-eda9-42fa-b2be-87e34609fce8"/>
            <column name="description" value="null"/>
            <column name="type" value="isRelatedTo"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a"/>
            <column name="target_id" value="ed3af509-904e-4732-8113-215d65a7d53d"/>
        </insert>
                <insert tableName="undirected_edge">
            <column name="id" value="41688138-792a-40d6-baef-827b400947eb"/>
            <column name="description" value="null"/>
            <column name="type" value="canBeUsedWith"/>
            <column name="p1_id" value="59389814-01e0-4422-8012-a298940064aa"/>
            <column name="p2_id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
        </insert>
                <insert tableName="undirected_edge">
            <column name="id" value="f1c376a6-af19-482f-aff7-ccb0e9a2c25c"/>
            <column name="description" value="null"/>
            <column name="type" value="canBeUsedWith"/>
            <column name="p1_id" value="59389814-01e0-4422-8012-a298940064aa"/>
            <column name="p2_id" value="b2eadd28-6cb8-407d-a4c4-bfb9eab44c2a"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="0c32eb04-28d8-4487-b75b-a6de3362d321"/>
            <column name="description" value="null"/>
            <column name="type" value="usedIn"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="60736854-6eb4-47b5-9619-2370825a34e9"/>
            <column name="target_id" value="4074490a-4236-49ed-83d1-625ce58e2dbd"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="d74cd8d6-b91e-440d-8d1d-95b02e8eeeb4"/>
            <column name="description" value="null"/>
            <column name="type" value="usedIn"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="60736854-6eb4-47b5-9619-2370825a34e9"/>
            <column name="target_id" value="9af072e8-875b-4e7d-980a-98cc6e0e7fd6"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="d07ebdb3-ccf2-419f-9f73-d32c59508784"/>
            <column name="description" value="null"/>
            <column name="type" value="isUsedBefore"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="60736854-6eb4-47b5-9619-2370825a34e9"/>
            <column name="target_id" value="456d4450-9ba7-4e43-8cb7-03ae01936fc4"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="aa1f00ff-eda2-47aa-9d13-477e1926dc76"/>
            <column name="description" value="null"/>
            <column name="type" value="isRelatedTo"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="456d4450-9ba7-4e43-8cb7-03ae01936fc4"/>
            <column name="target_id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="7e27f2c0-1b50-4da2-880c-742c9b71e369"/>
            <column name="description" value="null"/>
            <column name="type" value="isRelatedTo"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="456d4450-9ba7-4e43-8cb7-03ae01936fc4"/>
            <column name="target_id" value="8fcca2dc-fca0-47cf-9bd4-038cd2fe8fb8"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="1552df77-a64e-4853-a7aa-3cc17acdc1a4"/>
            <column name="description" value="null"/>
            <column name="type" value="canBeUsedWith"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
            <column name="target_id" value="ed3af509-904e-4732-8113-215d65a7d53d"/>
        </insert>
                <insert tableName="directed_edge">
            <column name="id" value="8aae23e1-1c47-4922-8eb6-7615d06d1fb9"/>
            <column name="description" value="null"/>
            <column name="type" value="canBeUsedWith"/>
            <column name="pattern_language_id" value="af7780d5-1f97-4536-8da7-4194b093ab1d"/>
            <column name="source_id" value="0ad210d4-18ad-4803-ba6b-536af0fab317"/>
            <column name="target_id" value="b6788c99-24f5-496b-a30c-fc0dd7bb3e96"/>
        </insert>
    </changeSet>
</databaseChangeLog>
